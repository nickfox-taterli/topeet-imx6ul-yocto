From de41d3af748277cb9983450cbab06df356b9b3bc Mon Sep 17 00:00:00 2001
From: Hou Qi <qi.hou@nxp.com>
Date: Mon, 20 Jun 2022 09:27:16 +0800
Subject: [PATCH] Chromium: enable proprietary codecs and support HEVC VP9

The original assert is added by below commit to avoid video/mp4 playback
failure since it fails to fallback to video/webm even if supported by server.
https://chromium.googlesource.com/chromium/src/+/8f897728330ab4afe8c449001386756a9895bcf7%5E%21/#F0

Now vpu decoder is integrated to chromium, so it's safe to remove the assert.

Upstream-Status: Inappropriate [NXP specific]
---
 build/config/features.gni                  | 2 +-
 media/BUILD.gn                             | 6 ------
 media/base/supported_types.cc              | 2 +-
 media/media_options.gni                    | 8 ++------
 media/renderers/default_decoder_factory.cc | 8 ++++----
 5 files changed, 8 insertions(+), 18 deletions(-)

diff --git a/build/config/features.gni b/build/config/features.gni
index 62bf4bcb350f9..b8b9809d3daba 100644
--- a/build/config/features.gni
+++ b/build/config/features.gni
@@ -23,7 +23,7 @@ declare_args() {
   #
   # Note: this flag is used by WebRTC which is DEPSed into Chrome. Moving it
   # out of //build will require using the build_overrides directory.
-  proprietary_codecs = is_chrome_branded || is_chromecast
+  proprietary_codecs = true
 
   # libudev usage. This currently only affects the content layer.
   use_udev = (is_linux || is_chromeos) && !is_chromecast
diff --git a/media/BUILD.gn b/media/BUILD.gn
index e1683ef9e76ef..5378781e2208a 100644
--- a/media/BUILD.gn
+++ b/media/BUILD.gn
@@ -57,12 +57,6 @@ buildflag_header("media_buildflags") {
   ]
 }
 
-if (proprietary_codecs && media_use_ffmpeg) {
-  assert(
-      ffmpeg_branding != "Chromium",
-      "proprietary codecs and ffmpeg_branding set to Chromium are incompatible")
-}
-
 # Common configuration for targets in the media directory; these must not be
 # exported since things like USE_NEON and USE_CRAS have different meanings
 # elsewhere in the code base.
diff --git a/media/base/supported_types.cc b/media/base/supported_types.cc
index 3e174b9320d08..727dc1867e6ff 100644
--- a/media/base/supported_types.cc
+++ b/media/base/supported_types.cc
@@ -318,7 +318,7 @@ bool IsDefaultSupportedVideoType(const VideoType& type) {
     case VideoCodec::kVP9:
       return IsVp9ProfileSupported(type);
     case VideoCodec::kHEVC:
-      return IsHevcProfileSupported(type);
+      return true;
     case VideoCodec::kMPEG4:
       return IsMPEG4Supported();
     case VideoCodec::kUnknown:
diff --git a/media/media_options.gni b/media/media_options.gni
index 1b2af27c5079d..7b3723bb5c0e0 100644
--- a/media/media_options.gni
+++ b/media/media_options.gni
@@ -90,16 +90,12 @@ declare_args() {
   # Enable HEVC/H265 demuxing. Actual decoding must be provided by the
   # platform. Enabled by default for Chromecast, fuzzer builds and protected
   # video on ChromeOS and Windows.
-  enable_platform_hevc =
-      proprietary_codecs &&
-      (is_chromecast || use_fuzzing_engine || enable_platform_encrypted_hevc)
+  enable_platform_hevc = true
 
   # Enable HEVC/H265 decoding with hardware acceleration assist. Enabled by
   # default for fuzzer builds and protected video on ChromeOS. It is also
   # enabled for Chromecast by default so the unit tests get run in Chrome CQ.
-  enable_platform_hevc_decoding =
-      proprietary_codecs &&
-      (is_chromecast || use_fuzzing_engine || use_chromeos_protected_media)
+  enable_platform_hevc_decoding = true
 }
 
 assert(
diff --git a/media/renderers/default_decoder_factory.cc b/media/renderers/default_decoder_factory.cc
index f077e56c7eccc..39f21c393d67e 100644
--- a/media/renderers/default_decoder_factory.cc
+++ b/media/renderers/default_decoder_factory.cc
@@ -181,6 +181,10 @@ void DefaultDecoderFactory::CreateVideoDecoders(
   }
 #endif
 
+#if BUILDFLAG(ENABLE_FFMPEG_VIDEO_DECODERS)
+  video_decoders->push_back(std::make_unique<FFmpegVideoDecoder>(media_log));
+#endif
+
 #if BUILDFLAG(ENABLE_LIBVPX)
   video_decoders->push_back(std::make_unique<OffloadingVpxVideoDecoder>());
 #endif
@@ -197,10 +201,6 @@ void DefaultDecoderFactory::CreateVideoDecoders(
         std::make_unique<OffloadingDav1dVideoDecoder>(media_log));
 #endif
   }
-
-#if BUILDFLAG(ENABLE_FFMPEG_VIDEO_DECODERS)
-  video_decoders->push_back(std::make_unique<FFmpegVideoDecoder>(media_log));
-#endif
 }
 
 void DefaultDecoderFactory::Shutdown() {
-- 
2.17.0

